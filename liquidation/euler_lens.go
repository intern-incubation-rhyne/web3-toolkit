package liquidation

import (
	"bytes"
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"math/big"
	"net/http"
	"strings"
	"toolkit/query"
	"toolkit/trace"
	"toolkit/utils"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/ethclient"
)

const (
	eulerLensAbi              = `[{"type":"function","name":"getRevenue","inputs":[{"name":"debt","type":"address","internalType":"address"},{"name":"debtAmount","type":"uint256","internalType":"uint256"},{"name":"collateral","type":"address","internalType":"address"},{"name":"collateralAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"int256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}]`
	eulerLensDeployedBytecode = ""
)

func GetBlockOverride(ctx context.Context, client *ethclient.Client, blockNumber uint64) (*query.BlockOverrides, error) {
	thisBlock, err := client.BlockByNumber(ctx, big.NewInt(int64(blockNumber)))
	if err != nil {
		return nil, fmt.Errorf("failed to get block: %v", err)
	}
	time := hexutil.Uint64(thisBlock.Time()) + 12
	number := hexutil.Big(*thisBlock.Number())
	gasLimit := hexutil.Uint64(thisBlock.GasLimit())
	feeRecipient := thisBlock.Coinbase()
	prevRandao := thisBlock.Header().MixDigest
	baseFeePerGas := hexutil.Big(*thisBlock.BaseFee())
	// beaconRoot := *thisBlock.BeaconRoot()
	blockOverrides := &query.BlockOverrides{
		Time:          &time,
		Number:        &number,
		GasLimit:      &gasLimit,
		FeeRecipient:  &feeRecipient,
		PrevRandao:    &prevRandao,
		BaseFeePerGas: &baseFeePerGas,
		// BeaconRoot:    &beaconRoot,
	}
	return blockOverrides, nil
}

func GetEulerRevenue(
	ctx context.Context, rpcUrl string, client *ethclient.Client,
	debt common.Address, debtAmount *big.Int,
	collateral common.Address, collateralAmount *big.Int,
	blockNumber *big.Int, txIndex uint,
) (*big.Int, *big.Int, *big.Int, error) {
	parsedABI, err := abi.JSON(strings.NewReader(eulerLensAbi))
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to parse eulerLensAbi: %v", err)
	}
	dummyAddress := common.HexToAddress("0x0000000000000000000000000000000000000000")

	data, err := parsedABI.Pack("getRevenue", debt, debtAmount, collateral, collateralAmount)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to pack data: %v", err)
	}

	blockOverrides, err := GetBlockOverride(ctx, client, blockNumber.Uint64())
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to get block overrides: %v", err)
	}

	params := []interface{}{
		map[string]interface{}{ // Tx Obj
			"to":   dummyAddress.Hex(),
			"data": "0x" + hex.EncodeToString(data),
		},
		"0x" + blockNumber.Text(16),
		map[string]interface{}{ // TraceConfig
			"tracer": "callTracer",
			"tracerConfig": map[string]interface{}{
				"withLog": true,
			},
			"stateOverrides": map[string]interface{}{
				dummyAddress.Hex(): map[string]interface{}{
					"code": eulerLensDeployedBytecode,
				},
			},
			"blockOverrides": blockOverrides,
			"txIndex":        fmt.Sprintf("0x%x", txIndex),
		},
	}

	// Geth style debug_traceCall
	payload := query.RPCRequest{
		JSONRPC: "2.0",
		Method:  "debug_traceCall",
		Params:  params,
		ID:      1,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to marshal json: %v", err)
	}

	resp, err := http.Post(rpcUrl, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to post: %v", err)
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	var rpcResp query.RPCResponse
	if err := json.Unmarshal(body, &rpcResp); err != nil {
		return nil, nil, nil, fmt.Errorf("failed to unmarshal: %v", err)
	}

	if rpcResp.Error != nil {
		fmt.Println("RPC Error:", rpcResp.Error.Message)
		return nil, nil, nil, err
	}

	var traceResult trace.CallTrace
	if err := json.Unmarshal(rpcResp.Result, &traceResult); err != nil {
		return nil, nil, nil, fmt.Errorf("failed to unmarshal: %v", err)
	}

	if len(traceResult.Output) != 96 {
		fmt.Println(traceResult.Error)
		marshaled, err := json.MarshalIndent(traceResult, "", "  ")
		if err != nil {
			return nil, nil, nil, fmt.Errorf("failed to marshal traceResult: %v", err)
		}
		fmt.Println(string(marshaled))

		return nil, nil, nil, fmt.Errorf("output length is not 96: %v", traceResult.Output)
	}

	revenue := utils.ParseInt256(traceResult.Output[0:32])
	debtValue := new(big.Int).SetBytes(traceResult.Output[32:64])
	collateralValue := new(big.Int).SetBytes(traceResult.Output[64:96])
	// fmt.Println("Revenue:", revenue)
	// fmt.Println("Debt Value:", debtValue)
	// fmt.Println("Collateral Value:", collateralValue)

	return revenue, debtValue, collateralValue, nil
}
