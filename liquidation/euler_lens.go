package liquidation

import (
	"bytes"
	"context"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"math/big"
	"net/http"
	"strings"
	"toolkit/query"
	"toolkit/trace"
	"toolkit/utils"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
)

const (
	eulerLensAbi              = `[{"type":"function","name":"GetRevenue","inputs":[{"name":"debt","type":"address","internalType":"address"},{"name":"debtAmount","type":"uint256","internalType":"uint256"},{"name":"collateral","type":"address","internalType":"address"},{"name":"collateralAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256","internalType":"int256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}]`
	eulerLensDeployedBytecode = "0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630495c5f41461004357806358ad722314610073578063d54674ba146100a5575b5f5ffd5b61005d600480360381019061005891906105ac565b6100d9565b60405161006a9190610644565b60405180910390f35b61008d6004803603810190610088919061065d565b610195565b60405161009c939291906106d9565b60405180910390f35b6100bf60048036038101906100ba919061070e565b6101e6565b6040516100d095949392919061076a565b60405180910390f35b5f5f8573ffffffffffffffffffffffffffffffffffffffff1663ae68676c888a886040518463ffffffff1660e01b8152600401610118939291906107bb565b602060405180830381865afa158015610133573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101579190610804565b9050836024610166919061085c565b600a61017291906109bf565b838261017e9190610a09565b6101889190610a77565b9150509695505050505050565b5f5f5f5f5f5f5f5f6101a78c8c6101e6565b945094509450945094505f6101c08b8b878787876100d9565b905085816101ce9190610aa7565b86829850985098505050505050509450945094915050565b5f5f5f5f5f5f8773ffffffffffffffffffffffffffffffffffffffff16637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610235573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102599190610afb565b90505f8873ffffffffffffffffffffffffffffffffffffffff16633e8333646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102c99190610afb565b90505f8273ffffffffffffffffffffffffffffffffffffffff1663ae68676c8a8c856040518463ffffffff1660e01b8152600401610309939291906107bb565b602060405180830381865afa158015610324573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103489190610804565b90505f82905061034873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361039b5773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890505b5f8173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104099190610b3a565b90505f6e0d6ffc74a8feb35af5827bf57f678673ffffffffffffffffffffffffffffffffffffffff16637de4fd108460016040518363ffffffff1660e01b8152600401610457929190610b7f565b602060405180830381865afa158015610472573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104969190610804565b90508160246104a5919061085c565b600a6104b191906109bf565b81856104bd9190610a09565b6104c79190610a77565b868684849a509a509a509a509a505050505050509295509295909350565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610512826104e9565b9050919050565b61052281610508565b811461052c575f5ffd5b50565b5f8135905061053d81610519565b92915050565b5f819050919050565b61055581610543565b811461055f575f5ffd5b50565b5f813590506105708161054c565b92915050565b5f60ff82169050919050565b61058b81610576565b8114610595575f5ffd5b50565b5f813590506105a681610582565b92915050565b5f5f5f5f5f5f60c087890312156105c6576105c56104e5565b5b5f6105d389828a0161052f565b96505060206105e489828a01610562565b95505060406105f589828a0161052f565b945050606061060689828a0161052f565b935050608061061789828a01610598565b92505060a061062889828a01610562565b9150509295509295509295565b61063e81610543565b82525050565b5f6020820190506106575f830184610635565b92915050565b5f5f5f5f60808587031215610675576106746104e5565b5b5f6106828782880161052f565b945050602061069387828801610562565b93505060406106a48782880161052f565b92505060606106b587828801610562565b91505092959194509250565b5f819050919050565b6106d3816106c1565b82525050565b5f6060820190506106ec5f8301866106ca565b6106f96020830185610635565b6107066040830184610635565b949350505050565b5f5f60408385031215610724576107236104e5565b5b5f6107318582860161052f565b925050602061074285828601610562565b9150509250929050565b61075581610508565b82525050565b61076481610576565b82525050565b5f60a08201905061077d5f830188610635565b61078a602083018761074c565b610797604083018661074c565b6107a4606083018561075b565b6107b16080830184610635565b9695505050505050565b5f6060820190506107ce5f830186610635565b6107db602083018561074c565b6107e8604083018461074c565b949350505050565b5f815190506107fe8161054c565b92915050565b5f60208284031215610819576108186104e5565b5b5f610826848285016107f0565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61086682610576565b915061087183610576565b9250828203905060ff81111561088a5761088961082f565b5b92915050565b5f8160011c9050919050565b5f5f8291508390505b60018511156108e5578086048111156108c1576108c061082f565b5b60018516156108d05780820291505b80810290506108de85610890565b94506108a5565b94509492505050565b5f826108fd57600190506109b8565b8161090a575f90506109b8565b8160018114610920576002811461092a57610959565b60019150506109b8565b60ff84111561093c5761093b61082f565b5b8360020a9150848211156109535761095261082f565b5b506109b8565b5060208310610133831016604e8410600b841016171561098e5782820a9050838111156109895761098861082f565b5b6109b8565b61099b848484600161089c565b925090508184048111156109b2576109b161082f565b5b81810290505b9392505050565b5f6109c982610543565b91506109d483610576565b9250610a017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846108ee565b905092915050565b5f610a1382610543565b9150610a1e83610543565b9250828202610a2c81610543565b91508282048414831517610a4357610a4261082f565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610a8182610543565b9150610a8c83610543565b925082610a9c57610a9b610a4a565b5b828204905092915050565b5f610ab1826106c1565b9150610abc836106c1565b925082820390508181125f8412168282135f851215161715610ae157610ae061082f565b5b92915050565b5f81519050610af581610519565b92915050565b5f60208284031215610b1057610b0f6104e5565b5b5f610b1d84828501610ae7565b91505092915050565b5f81519050610b3481610582565b92915050565b5f60208284031215610b4f57610b4e6104e5565b5b5f610b5c84828501610b26565b91505092915050565b5f8115159050919050565b610b7981610b65565b82525050565b5f604082019050610b925f83018561074c565b610b9f6020830184610b70565b939250505056fea26469706673582212206932ba953eca6dd37a8a0f495ee65a3b2720e9191423b139a8b5bcd4d36e109064736f6c634300081e0033"
)

func GetEulerRevenue(
	ctx context.Context, rpcUrl string,
	debt common.Address, debtAmount *big.Int,
	collateral common.Address, collateralAmount *big.Int,
	blockNumber *big.Int, txIndex uint,
) (*big.Int, *big.Int, *big.Int, error) {
	parsedABI, err := abi.JSON(strings.NewReader(eulerLensAbi))
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to parse eulerLensAbi: %v", err)
	}
	dummyAddress := common.HexToAddress("0x0000000000000000000000000000000000000000")

	data, err := parsedABI.Pack("GetRevenue", debt, debtAmount, collateral, collateralAmount)
	if err != nil {
		return nil, nil, nil, fmt.Errorf("failed to pack data: %v", err)
	}

	params := []interface{}{
		map[string]interface{}{ // Tx Obj
			"to":   dummyAddress.Hex(),
			"data": "0x" + hex.EncodeToString(data),
		},
		"0x" + blockNumber.Text(16),
		map[string]interface{}{ // TraceConfig
			"tracer": "callTracer",
			"tracerConfig": map[string]interface{}{
				"withLog": true,
			},
			"stateOverrides": map[string]interface{}{
				dummyAddress.Hex(): map[string]interface{}{
					"code": eulerLensDeployedBytecode,
				},
			},
			"txIndex": fmt.Sprintf("0x%x", txIndex),
		},
	}

	// Geth style debug_traceCall
	payload := query.RPCRequest{
		JSONRPC: "2.0",
		Method:  "debug_traceCall",
		Params:  params,
		ID:      1,
	}

	jsonData, err := json.Marshal(payload)
	if err != nil {
		panic(err)
	}

	resp, err := http.Post(rpcUrl, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)

	var rpcResp query.RPCResponse
	if err := json.Unmarshal(body, &rpcResp); err != nil {
		panic(err)
	}

	if rpcResp.Error != nil {
		fmt.Println("RPC Error:", rpcResp.Error.Message)
		return nil, nil, nil, err
	}

	var traceResult trace.CallTrace
	if err := json.Unmarshal(rpcResp.Result, &traceResult); err != nil {
		panic(err)
	}

	revenue := utils.ParseInt256(traceResult.Output[0:32])
	debtValue := new(big.Int).SetBytes(traceResult.Output[32:64])
	collateralValue := new(big.Int).SetBytes(traceResult.Output[64:96])
	fmt.Println("Revenue:", revenue)
	fmt.Println("Debt Value:", debtValue)
	fmt.Println("Collateral Value:", collateralValue)

	return revenue, debtValue, collateralValue, nil
}
